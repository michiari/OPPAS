/*  Corresponding Procedure in Java syntax:

	main(){
		try{
			qs();
		}catch(){
			parseList();
			// null elements removed
			qs();
		}
	}

	//same procedure as in Correct Quicksort
	qs(){
		...
		accessValues();
		...
	}

	parseList(){
		hasParsed = true;
	}

	accessValues(){
		if(*){
			throw();
		} else{
			\\ readValues
		}
	}

	Described in: Pontiggia F., Chiari M., Pradella M.. Verification of Programs with Exceptions through Operator Precedence Automata, SEFM 2021.
	(extended from Pontiggia's Master Thesis)
*/


formulas = 	F (ret And main),
			XNu (ret And main),
			F ( G (~ aleftGTaright)),
			XNu (~ aleftGTaright),
			G ((call And main) --> ~ (PNu exc Or XNu exc)),
			G ((call And qs2) --> ~ (PNu exc Or XNu exc)),
			((PNu exc) Or (XNu exc)) --> ((PNu (exc And hasParsed)) Or (XNu (exc And hasParsed))),
			((PNu exc) Or (XNu exc)) --> ((PNu (exc And ~ aleftGTaright)) Or (XNu (exc And ~ aleftGTaright))),
			G ( (call And accessValues) --> (hasParsed) Or (T Sd han )),
			(F (ret And main)) Or (XNu (exc And hasParsed)),
			(XNu (ret And main)) Or (XNu (exc And hasParsed)),
			(F ( G (~ aleftGTaright))) Or (XNu (exc And hasParsed)),
			(XNu (~ aleftGTaright)) Or (XNu (exc And hasParsed)),
			(F (ret And main And (~ aleftGTaright))) Or (XNu (exc And hasParsed));

program:
var leftGEQright, loLThi, loEQhi, loEQleft, hiEQright, eqEQlo, eqEQleft, aleftGTaright, aleftEQaright, hasParsed;

main() {
	leftGEQright = false;
	randomInput();
	hasParsed = false;
	try {
	 	qs2();
	} catch {
		hasParsed = true;
		qs2();
	}
}

qs2() {
	if (leftGEQright) {
	} else {
		loEQhi = false;
		loLThi = true;
		loEQleft = true;
		hiEQright = true;
		eqEQlo = true;
		eqEQleft = true;
		accessValues();
		firstIteration2();
		while (loLThi || loEQhi) {
			qsif2();
		}

		if (loEQleft){
			leftGEQright = true;
			qs2();
			leftGEQright = false;
			qs2();
		} else {
			if (hiEQright && eqEQlo) {
				leftGEQright = false;
				qs2();
				leftGEQright = true;
				qs2();
			} else {
				if (hiEQright && eqEQleft) {
					leftGEQright = true;
					qs2();
					leftGEQright = true;
					qs2();
				} else {
					if (hiEQright) {
						leftGEQright = true;
						qs2();
						leftGEQright = true;
						qs2();
					} else {
						if (eqEQleft) {
							leftGEQright = true;
							qs2();
							leftGEQright = true;
							qs2();
						} else {
							if (eqEQlo) {
								leftGEQright = true;
								qs2();
								leftGEQright = true;
								qs2();
							} else {}
						}
					}
				}
			}
		}
	}
}

qsif2() {
	// this if-condition is due to swapping of firstIteration
	if ((! aleftGTaright) && (! aleftEQaright)) {
		shiftloLEQhi2();
		hiEQright = false;
	} else {
		if (! loEQhi){
			swapElements();
		} else {}

		if (aleftGTaright) {
			if (! eqEQlo){
				swapElements();
			} else {}
			eqEQleft = false;
		} else {
			eqEQlo = false;
		}

		shiftloLEQhi2();
		loEQleft = false;
	}
}

firstIteration2() {
	swapElements();
	//lo++;
	eqEQlo = false;
	shiftloLEQhi2();
	loEQleft = false;
}

shiftloLEQhi2() {
	if (loEQhi) {
		loEQhi = false;
		loLThi = false;
	} else {
		loEQhi = true;
		loLThi = false;
	}
}

randomInput() {
	if (*) {
		aleftGTaright = true;
		aleftEQaright = false;
	} else {
		if (*) {
			aleftGTaright = false;
			aleftEQaright = true;
		} else {
			aleftGTaright = false;
			aleftEQaright = false;
		}
	}
}

swapElements() {
	if (aleftEQaright) {
	} else {
		aleftGTaright = !aleftGTaright;
	}
}

accessValues(){
	if (*){
		throw;
	} else {}
}