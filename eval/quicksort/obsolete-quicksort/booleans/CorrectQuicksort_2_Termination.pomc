/*  Corresponding procedure in C syntax:

	void quicksort (int left,int right)
	{
		int lo,eq,hi,piv;
		if (left >= right) return;
		piv = a[right]; lo = eq = left; hi = right;
		while (lo <= hi) {
			if (a[hi] > piv) {
				hi--;
			} else {
				swap a[lo],a[hi];
				if (a[lo] < piv) {
					swap a[lo],a[eq];
					eq++;
				}
				lo++;
			}
		}
		quicksort(left,eq-1);
		quicksort(lo,right);
	}

	Ref: Schwoon, Stefan. Model-checking pushdown systems. Diss. Technische Universität München, 2002. 
	Described in: Pontiggia, Francesco. POMC. A model checking tool for operator precedence languages on omega-words. Master’s thesis. Politecnico di Milano, 2021.

	Abstracted over the array content and the local variable piv.
	
	Abstract version:
	void quicksort (int left,int right)
	{
		int lo,eq,hi,piv;
		if (left >= right) return;
	    lo = eq = left; hi = right;
		while (lo <= hi) {
		    // switch if-else branches
			if (*) {
				hi--;
			} else {
				if (*) {
					eq++;
				}
				lo++;
			}
		}
		quicksort(left,eq-1);
		quicksort(lo,right);
	}
*/

formulas = 	F (ret And main),
			XNu (ret And main);

program:
var leftGEQright, loLThi, loEQhi, loEQleft, hiEQright, eqEQlo, eqEQleft;

main() {
	leftGEQright = false;
	qs2();
}

qs2() {
	if (leftGEQright) {
	} else {
		loEQhi = false;
		loLThi = true;
		loEQleft = true;
		hiEQright = true;
		eqEQlo = true;
		eqEQleft = true;
		firstIteration2();
		while (loLThi || loEQhi) { 
			qsif2();
		}
		
		//recursive calls
		if (loEQleft){ 
			leftGEQright = true;
			qs2();
			leftGEQright = false;
			qs2();
		} else { 
			if (hiEQright && eqEQlo) { 
				leftGEQright = false;
				qs2();
				leftGEQright = true;
				qs2();
			} else {
				if (hiEQright && eqEQleft) { 
					leftGEQright = true;
					qs2();
					leftGEQright = true;
					qs2();
				} else {
					if (hiEQright) { 
						leftGEQright = true;
						qs2();
						leftGEQright = true;
						qs2();
					} else {
						if (eqEQleft) { 
							leftGEQright = true;
							qs2();
							leftGEQright = true;
							qs2();
						} else {
							if (eqEQlo) { 
								leftGEQright = true;
								qs2();
								leftGEQright = true;
								qs2();
							} else {}
						} 
					}
				}				
			}
		}
	}
}

qsif2() {
	if (*) {
		shiftloLEQhi2();
		hiEQright = false;
	} else {
		if (*) {
			eqEQleft = false;
		} else {
			eqEQlo = false;
		}
		shiftloLEQhi2();
		loEQleft = false;	
	}
}

firstIteration2() {
	eqEQlo = false;
	shiftloLEQhi2();
	loEQleft = false;
}

shiftloLEQhi2() {
	if (loEQhi) {
		loEQhi = false;
		loLThi = false;					
	} else {
		loEQhi = true;
		loLThi = false;
	}
}