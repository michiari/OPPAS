/* Original program: 

static int mid;
B(List<T> a, T val, int left, int right){
    // randomly select pivot element
    mid = Uniform(left,right);

    if (left < right){

        if (a[mid] < val){
            left = min(mid +1, right);
            B(a, val, left, right);
        } else {
            if (a[mid] > val) {
                right = max (mid -1, left);
                B(a, val, left, right);
            }
        }
    }
}
// B is supposed to store in mid the index of where val lies in array a

Reference: F. Olmedo et al., Reasoning about Recursive Probabilistic Programs, LICS 2016.
*/

probabilistic query: quantitative;
formula = G ((call And B And sorted And (~ valOccurs) And [B|left < right]) --> PNd (F (call And B)));
// S6: Stack inspection (v2) (LTL)

program:
u4[7] a;
u4 mid;
u4 val;
bool sorted, valOccurs, correctIndex;

main() {
    u4 left, right, temp, max_array_value, max_array_index;
    s5 counter;

    // Elements domain bits: K = 3;
    max_array_value = 7u4;

    // Array length: M = 1;
    max_array_index = 0u4;

    // initialization of left and right 
    uniformSample(left, 0u4, max_array_index);
    uniformSample(right, 0u4, max_array_index);

    // initialization of val and array
    uniformSample(val, 0u4, max_array_value);
    counter = right;
    while (counter >= left){
        uniformSample(temp, 0u4, max_array_value);
        a[counter] = temp;
        counter = counter -1s5;
    }

    checkSortedness(left, right);
    checkValOccurrence(left, right);
    B(left, right); 
}

B(u4 left, u4 right){
    uniformSample(mid, left, right);

    if (left < right){
        if (a[mid] < val){
            if (mid + 1s5 < right){
                left = mid + 1s5;
            } else {
                left = right;
            }
            checkSortedness(left, right);
            checkValOccurrence(left, right);
            B(left, right);
        } else {
            if (a[mid] > val) {
                if (mid - 1s5 > left){
                    right = mid - 1s5;
                } else {
                    right = left;
                }
                checkSortedness(left, right);
                checkValOccurrence(left, right);
                B(left, right);
            } else {}
        }
    } else {}
    checkCorrectIndex();
}

uniformSample(u4 &elem, u4 left, u4 right){
    bool stop;
    if (left > right){
        while (true) {
            // random assignment diverges if left > right
            stop = false; // loops with empty body are not allowed in MiniProb.
        }
    } else {
        elem = uniform(left, right);
    }  
}

checkSortedness(u4 left, u4 right){
    u4 counter;
    bool newSorted;
    newSorted = true;
    
    if (left < right){
        counter = right;
        while(counter > left){
            newSorted = newSorted && a[counter - 1u4] <= a[counter];
            counter = counter - 1u4;
        }
    } else{
        // if there is one or less elements, we assume sorted by default
    }
    sorted = newSorted;  
}

checkValOccurrence(u4 left, u4 right){
    s5 counter;
    bool newValOccurs;
    newValOccurs = false;

    if (left <= right){
        counter = right;
        newValOccurs = false;
        while(counter >= left){
            // val can occurr multiple times
            newValOccurs = newValOccurs || a[counter] == val;
            counter = counter - 1s5;
        }
        
    } else{
       // val certainly does not occurr in an empty array 
    } 
    valOccurs = newValOccurs;
}

checkCorrectIndex(){
    correctIndex = a[mid] == val;
}

